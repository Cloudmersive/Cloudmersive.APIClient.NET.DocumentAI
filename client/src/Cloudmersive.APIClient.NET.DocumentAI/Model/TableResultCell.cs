/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.DocumentAI.Model
{
    /// <summary>
    /// Cell of a row of a table extracted from a document
    /// </summary>
    [DataContract]
    public partial class TableResultCell :  IEquatable<TableResultCell>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TableResultCell" /> class.
        /// </summary>
        /// <param name="cellHeader">Cell column header.</param>
        /// <param name="cellValue">Cell value as a string.</param>
        public TableResultCell(string cellHeader = default(string), string cellValue = default(string))
        {
            this.CellHeader = cellHeader;
            this.CellValue = cellValue;
        }
        
        /// <summary>
        /// Cell column header
        /// </summary>
        /// <value>Cell column header</value>
        [DataMember(Name="CellHeader", EmitDefaultValue=false)]
        public string CellHeader { get; set; }

        /// <summary>
        /// Cell value as a string
        /// </summary>
        /// <value>Cell value as a string</value>
        [DataMember(Name="CellValue", EmitDefaultValue=false)]
        public string CellValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TableResultCell {\n");
            sb.Append("  CellHeader: ").Append(CellHeader).Append("\n");
            sb.Append("  CellValue: ").Append(CellValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TableResultCell);
        }

        /// <summary>
        /// Returns true if TableResultCell instances are equal
        /// </summary>
        /// <param name="input">Instance of TableResultCell to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TableResultCell input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CellHeader == input.CellHeader ||
                    (this.CellHeader != null &&
                    this.CellHeader.Equals(input.CellHeader))
                ) && 
                (
                    this.CellValue == input.CellValue ||
                    (this.CellValue != null &&
                    this.CellValue.Equals(input.CellValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CellHeader != null)
                    hashCode = hashCode * 59 + this.CellHeader.GetHashCode();
                if (this.CellValue != null)
                    hashCode = hashCode * 59 + this.CellValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
