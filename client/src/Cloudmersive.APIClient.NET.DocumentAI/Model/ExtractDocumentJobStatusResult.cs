/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.DocumentAI.Model
{
    /// <summary>
    /// Result of performing a batch job operation
    /// </summary>
    [DataContract]
    public partial class ExtractDocumentJobStatusResult :  IEquatable<ExtractDocumentJobStatusResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractDocumentJobStatusResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation to check the status of the job was successful, false otherwise.</param>
        /// <param name="asyncJobStatus">Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED.</param>
        /// <param name="asyncJobID">Job ID.</param>
        /// <param name="extractTextResult">extractTextResult.</param>
        /// <param name="extractFieldsAndTablesResult">extractFieldsAndTablesResult.</param>
        /// <param name="extractFieldsResult">extractFieldsResult.</param>
        /// <param name="extractClassificationResult">extractClassificationResult.</param>
        /// <param name="errorMessage">Error message (if any).</param>
        public ExtractDocumentJobStatusResult(bool? successful = default(bool?), string asyncJobStatus = default(string), string asyncJobID = default(string), ExtractTextResponse extractTextResult = default(ExtractTextResponse), ExtractFieldsAndTablesResponse extractFieldsAndTablesResult = default(ExtractFieldsAndTablesResponse), ExtractFieldsResponse extractFieldsResult = default(ExtractFieldsResponse), DocumentClassificationResult extractClassificationResult = default(DocumentClassificationResult), string errorMessage = default(string))
        {
            this.Successful = successful;
            this.AsyncJobStatus = asyncJobStatus;
            this.AsyncJobID = asyncJobID;
            this.ExtractTextResult = extractTextResult;
            this.ExtractFieldsAndTablesResult = extractFieldsAndTablesResult;
            this.ExtractFieldsResult = extractFieldsResult;
            this.ExtractClassificationResult = extractClassificationResult;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// True if the operation to check the status of the job was successful, false otherwise
        /// </summary>
        /// <value>True if the operation to check the status of the job was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED
        /// </summary>
        /// <value>Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED</value>
        [DataMember(Name="AsyncJobStatus", EmitDefaultValue=false)]
        public string AsyncJobStatus { get; set; }

        /// <summary>
        /// Job ID
        /// </summary>
        /// <value>Job ID</value>
        [DataMember(Name="AsyncJobID", EmitDefaultValue=false)]
        public string AsyncJobID { get; set; }

        /// <summary>
        /// Gets or Sets ExtractTextResult
        /// </summary>
        [DataMember(Name="ExtractTextResult", EmitDefaultValue=false)]
        public ExtractTextResponse ExtractTextResult { get; set; }

        /// <summary>
        /// Gets or Sets ExtractFieldsAndTablesResult
        /// </summary>
        [DataMember(Name="ExtractFieldsAndTablesResult", EmitDefaultValue=false)]
        public ExtractFieldsAndTablesResponse ExtractFieldsAndTablesResult { get; set; }

        /// <summary>
        /// Gets or Sets ExtractFieldsResult
        /// </summary>
        [DataMember(Name="ExtractFieldsResult", EmitDefaultValue=false)]
        public ExtractFieldsResponse ExtractFieldsResult { get; set; }

        /// <summary>
        /// Gets or Sets ExtractClassificationResult
        /// </summary>
        [DataMember(Name="ExtractClassificationResult", EmitDefaultValue=false)]
        public DocumentClassificationResult ExtractClassificationResult { get; set; }

        /// <summary>
        /// Error message (if any)
        /// </summary>
        /// <value>Error message (if any)</value>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractDocumentJobStatusResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  AsyncJobStatus: ").Append(AsyncJobStatus).Append("\n");
            sb.Append("  AsyncJobID: ").Append(AsyncJobID).Append("\n");
            sb.Append("  ExtractTextResult: ").Append(ExtractTextResult).Append("\n");
            sb.Append("  ExtractFieldsAndTablesResult: ").Append(ExtractFieldsAndTablesResult).Append("\n");
            sb.Append("  ExtractFieldsResult: ").Append(ExtractFieldsResult).Append("\n");
            sb.Append("  ExtractClassificationResult: ").Append(ExtractClassificationResult).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractDocumentJobStatusResult);
        }

        /// <summary>
        /// Returns true if ExtractDocumentJobStatusResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractDocumentJobStatusResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractDocumentJobStatusResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.AsyncJobStatus == input.AsyncJobStatus ||
                    (this.AsyncJobStatus != null &&
                    this.AsyncJobStatus.Equals(input.AsyncJobStatus))
                ) && 
                (
                    this.AsyncJobID == input.AsyncJobID ||
                    (this.AsyncJobID != null &&
                    this.AsyncJobID.Equals(input.AsyncJobID))
                ) && 
                (
                    this.ExtractTextResult == input.ExtractTextResult ||
                    (this.ExtractTextResult != null &&
                    this.ExtractTextResult.Equals(input.ExtractTextResult))
                ) && 
                (
                    this.ExtractFieldsAndTablesResult == input.ExtractFieldsAndTablesResult ||
                    (this.ExtractFieldsAndTablesResult != null &&
                    this.ExtractFieldsAndTablesResult.Equals(input.ExtractFieldsAndTablesResult))
                ) && 
                (
                    this.ExtractFieldsResult == input.ExtractFieldsResult ||
                    (this.ExtractFieldsResult != null &&
                    this.ExtractFieldsResult.Equals(input.ExtractFieldsResult))
                ) && 
                (
                    this.ExtractClassificationResult == input.ExtractClassificationResult ||
                    (this.ExtractClassificationResult != null &&
                    this.ExtractClassificationResult.Equals(input.ExtractClassificationResult))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.AsyncJobStatus != null)
                    hashCode = hashCode * 59 + this.AsyncJobStatus.GetHashCode();
                if (this.AsyncJobID != null)
                    hashCode = hashCode * 59 + this.AsyncJobID.GetHashCode();
                if (this.ExtractTextResult != null)
                    hashCode = hashCode * 59 + this.ExtractTextResult.GetHashCode();
                if (this.ExtractFieldsAndTablesResult != null)
                    hashCode = hashCode * 59 + this.ExtractFieldsAndTablesResult.GetHashCode();
                if (this.ExtractFieldsResult != null)
                    hashCode = hashCode * 59 + this.ExtractFieldsResult.GetHashCode();
                if (this.ExtractClassificationResult != null)
                    hashCode = hashCode * 59 + this.ExtractClassificationResult.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
