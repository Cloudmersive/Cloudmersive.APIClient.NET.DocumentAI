/* 
 * Document AI API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.DocumentAI.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.DocumentAI.Model
{
    /// <summary>
    /// Result of extracting barcodes from a document
    /// </summary>
    [DataContract]
    public partial class ExtractBarcodesAiResponse :  IEquatable<ExtractBarcodesAiResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractBarcodesAiResponse" /> class.
        /// </summary>
        /// <param name="successful">True if successful, false otherwise.</param>
        /// <param name="barcodeResults">Table value results from the extraction operation.</param>
        public ExtractBarcodesAiResponse(bool? successful = default(bool?), List<ExtractedBarcodeItem> barcodeResults = default(List<ExtractedBarcodeItem>))
        {
            this.Successful = successful;
            this.BarcodeResults = barcodeResults;
        }
        
        /// <summary>
        /// True if successful, false otherwise
        /// </summary>
        /// <value>True if successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Table value results from the extraction operation
        /// </summary>
        /// <value>Table value results from the extraction operation</value>
        [DataMember(Name="BarcodeResults", EmitDefaultValue=false)]
        public List<ExtractedBarcodeItem> BarcodeResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtractBarcodesAiResponse {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  BarcodeResults: ").Append(BarcodeResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExtractBarcodesAiResponse);
        }

        /// <summary>
        /// Returns true if ExtractBarcodesAiResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ExtractBarcodesAiResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtractBarcodesAiResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.BarcodeResults == input.BarcodeResults ||
                    this.BarcodeResults != null &&
                    this.BarcodeResults.SequenceEqual(input.BarcodeResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.BarcodeResults != null)
                    hashCode = hashCode * 59 + this.BarcodeResults.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
